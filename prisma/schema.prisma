// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  first_name   String
  last_name    String
  password     String
  phone_number String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  confirmed    Boolean  @default(false)
  is_active    Boolean  @default(true)

  UserRole          UserRole[]
  UserMarket        UserMarket[]
  UserSession       UserSession[]
  confirmationToken ConfirmationToken?
}

model Role {
  id       String     @id @default(uuid())
  name     String     @unique
  UserRole UserRole[]
}

model UserRole {
  role_id     String
  user_id     String
  is_approved Boolean @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@unique([role_id, user_id])
}

model UserSession {
  id            String   @id @default(uuid())
  user_id       String
  refresh_token String   @unique
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Market {
  id         String   @id @default(uuid())
  name       String
  address    String
  image_url  String
  is_open    Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  UserMarket UserMarket[]
}

model UserMarket {
  user_id   String
  market_id String

  user              User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  market            Market              @relation(fields: [market_id], references: [id], onDelete: Cascade)
  UserMarketProduct UserMarketProduct[]

  @@id([user_id, market_id])
  @@unique([user_id, market_id])
}

model Product {
  id                  String              @id @default(uuid())
  name                String              @unique
  unit_of_measurement String
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  UserMarketProduct   UserMarketProduct[]
}

model UserMarketProduct {
  user_id    String
  market_id  String
  product_id String

  userMarket UserMarket            @relation(fields: [user_id, market_id], references: [user_id, market_id])
  product    Product               @relation(fields: [product_id], references: [id])
  Price      ProductPriceHistory[]

  @@id([user_id, market_id, product_id])
}

model ProductPriceHistory {
  id          String   @id @default(uuid())
  price_date  DateTime @default(now())
  price_value Float

  user_id           String
  market_id         String
  product_id        String
  UserMarketProduct UserMarketProduct @relation(fields: [user_id, market_id, product_id], references: [user_id, market_id, product_id])
}

model ConfirmationToken {
  id              String   @id @default(uuid())
  token           String   @unique
  user_id         String   @unique
  failed_attempts Int      @default(0)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
